{% if template == 'singleLang' and not(multiLangField is empty) %}
<?php

namespace Backend\Model\Entity;

use Cake\ORM\Entity;
use Backend\Base\Entity\EntityTranslate;
use Cake\Core\Configure;

class {{singleName}} extends EntityTranslate {

    public $multiLangField = [
        {% for nameField,option in multiLangField %}
            {% if option.type == "text" or option.type == "textarea" or option.type == "editor" %}
           '{{nameField}}',
            {% endif %}
        {% endfor %}
    ];
    
    {% if not(imageField is empty) %}
    protected $_virtual = [
        {% for nameField,option in imageField %}
           '{{nameField}}',
        {% endfor %}
    ];
    {% endif %}
    {% if not(imageField is empty) %}
        {% for nameField,option in imageField %}
        protected function _getLink{{nameField}}() {
            return Configure::read('LinkStatic.UploadFolder') . '{{pluralName}}/' . $this->{{nameField}};
        }
        {% endfor %}
    {% endif %}

}
{% else %}
<?php

namespace Backend\Model\Entity;

use Cake\ORM\Entity;
use Cake\Core\Configure;

class {{singleName}} extends Entity {

    protected $_accessible = [
        '*' => true,
        'id' => false,
    ];
    {% if not(imageField is empty) %}
    protected $_virtual = [
        {% for nameField,option in imageField %}
           'link{{nameField|capitalize}}',
        {% endfor %}
    ];
    {% endif %}
    {% if not(imageField is empty) %}
        {% for nameField,option in imageField %}
        protected function _getLink{{nameField|capitalize}}() {
            return Configure::read('LinkStatic.UploadFolder') . '{{pluralName}}/' . $this->{{nameField}};
        }
        {% endfor %}
    {% endif %}
    
  
}
{% endif %}